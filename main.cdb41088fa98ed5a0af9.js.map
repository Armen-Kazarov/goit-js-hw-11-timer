{"version":3,"sources":["webpack:///./index.js","webpack:///./js/countDownTimer.js"],"names":["selector","targetDate","this","time","Date","now","days","document","querySelector","hours","mins","secs","setValueToTimer","textContent","Math","floor","timerInit","setInterval"],"mappings":"mIAGc,ICHd,WACE,cAAmC,IAAtBA,EAAsB,EAAtBA,SAASC,EAAa,EAAbA,WACpBC,KAAKD,WAAaA,EAClBC,KAAKC,KAAOF,EAAaG,KAAKC,MAC9BH,KAAKI,KAAOC,SAASC,cAAiBR,EAA1B,8BACZE,KAAKO,MAAQF,SAASC,cAAiBR,EAA1B,+BACbE,KAAKQ,KAAOH,SAASC,cAAiBR,EAA1B,8BACZE,KAAKS,KAAOJ,SAASC,cAAiBR,EAA1B,8BAPhB,2BAUEY,gBAAA,WAKEV,KAAKI,KAAKO,YAAeC,KAAKC,MAAMb,KAAKC,KAAL,OAMpCD,KAAKO,MAAMI,YAAeC,KAAKC,MAAOb,KAAKC,KAAL,MAAD,MAKrCD,KAAKQ,KAAKG,YAAeC,KAAKC,MAAOb,KAAKC,KAAL,KAAD,KAKpCD,KAAKS,KAAKE,YAAeC,KAAKC,MAAOb,KAAKC,KAAL,IAA2B,MA/BpE,EAkCEa,UAAA,WAAY,WACVC,aAAY,WACV,EAAKd,KAAO,EAAKF,WAAaG,KAAKC,MAE/B,EAAKF,OAAS,EAAKF,aACrB,EAAKE,KAAO,GAEd,EAAKS,oBACJ,MA1CP,KDGc,CAAmB,CAC/BZ,SAAU,WACVC,WAAY,IAAIG,KAAK,kBAGjBY,c","file":"main.cdb41088fa98ed5a0af9.js","sourcesContent":["import './styles.css';\nimport  { CountdownTimer } from './js/countDownTimer';\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Dec 31, 2020'),\n});\n\ntimer.timerInit();\n","export class CountdownTimer{\r\n  constructor({selector,targetDate}) {\r\n    this.targetDate = targetDate;\r\n    this.time = targetDate - Date.now();\r\n    this.days = document.querySelector(`${selector} .value[data-value=\"days\"]`);\r\n    this.hours = document.querySelector(`${selector} .value[data-value=\"hours\"]`);\r\n    this.mins = document.querySelector(`${selector} .value[data-value=\"mins\"]`);\r\n    this.secs = document.querySelector(`${selector} .value[data-value=\"secs\"]`);\r\n  };\r\n\r\n  setValueToTimer() {\r\n    /*\r\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n */\r\n    this.days.textContent  = Math.floor(this.time / (1000 * 60 * 60 * 24));\r\n    /*\r\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n * остатка % и делим его на количество миллисекунд в одном часе\r\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n */\r\n    this.hours.textContent  = Math.floor((this.time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    /*\r\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n */\r\n    this.mins.textContent  = Math.floor((this.time % (1000 * 60 * 60)) / (1000 * 60));\r\n    /*\r\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n * миллисекунд в одной секунде (1000)\r\n */\r\n    this.secs.textContent  = Math.floor((this.time % (1000 * 60)) / 1000);\r\n  };\r\n\r\n  timerInit() {\r\n    setInterval(() => {\r\n      this.time = this.targetDate - Date.now();\r\n\r\n      if (this.time === this.targetDate) {\r\n        this.time = 0;\r\n      }\r\n      this.setValueToTimer()\r\n    }, 1000);\r\n  };\r\n}\r\n"],"sourceRoot":""}